<?php

require('mailgroup.features.inc');

/**
 * Assigns OG id and type to incoming message based on group feature's settings
 * 
 * @param $node
 *   Object - node object
 * @param $result
 * @param $i
 * @param $header
 * @param $mailbox
 * @return unknown_type
 */
function mailgroup_mailhandler($node, $result, $i, $header, $mailbox) {
  $groupname = mailgroup_parse_groupname($header);
  $groupinfo = mailgroup_get_settings($groupname, 'prefix');
  $space = spaces_load('og', $groupinfo['id']);
  $features = $space->controllers->variable->get('spaces_features');
  if ($features['mailgroup']) {
    if ($groupinfo['id'] && $groupinfo['nodetype']) {
      // The $node->uid should be set by now using mailhandler authentication API
      if (og_is_group_member($groupinfo['id'], TRUE, $node->uid)) {
        $node->og_groups[$groupinfo['id']] = $groupinfo['id'];
        $node->type = $groupinfo['nodetype'];
      }
    }
  }
  return $node;
}

/**
 * Parses the group name from the "to" address and returns it.
 * 
 * @param $header
 *   Object - email header object
 * 
 * @return
 *   String - the name of the group
 */
function mailgroup_parse_groupname($header) {
  $mailbox = $header->to[0]->mailbox;
  return substr($mailbox, strpos($mailbox, "-") +1);
}

/**
 * Implementation of hook_block()
 */
function mailgroup_block($op = 'list', $delta = 0) {
  switch ($op) {
    case 'list':
      $blocks['info'] = array('info' => t('MailGroup Information'));
      return $blocks;
    case 'view':
      switch ($delta) {
        case 'info':
          $blocks['subject'] = t('Post via email');
          $blocks['content'] = mailgroup_block_information();
      }
      return $blocks;
  }
}

function mailgroup_menu() {
  $items = array();
  $items['features/mailgroup'] = array(
    'title' => 'Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mailgroup_features_settings_form'),
    'access callback' => 'spaces_access_admin',
    'access arguments' => array(),
    'type' => MENU_CALLBACK,
  );
  $items['admin/settings/mailgroup'] = array(
    'title' => 'MailGroup Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mailgroup_global_settings'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_CALLBACK,
  );
  $items['mailgroup'] = array(
    'title' => 'Mail Group',
    'page callback' => 'mailgroup_page',
    'page arguments' => array(),
    'access callback' => 'spaces_access_feature',
    'access arguments' => array('view', 'mailgroup'),
    'type' => MENU_NORMAL_ITEM,
    'menu_name' => 'features',
  );
  return $items;
}

function mailgroup_features_settings_form() {
  $id = spaces_get_space()->id;
  $settings = mailgroup_get_settings($id);
  $form = array();
  $form['mailgroup'] = array(
    '#type' => 'fieldset',
    '#title' => t('MailGroup Settings'),
  );
  $form['mailgroup']['prefix'] = array(
    '#type' => 'textfield',
    '#title' => t('Address prefix'),
    '#description' => 'Define an address prefix.  The final "to" address for the group will be an address like
      "sd89dk22-foo@example.com" where "sd89dk22" is an automatically created token and "foo" is the address prefix.
      ',
    '#default_value' => $settings['prefix'],
  );
  $form['mailgroup']['subject'] = array(
    '#type' => 'textfield',
    '#title' => t('Subject name'),
    '#description' => t('If you chose to "Use mailing list-style subjects" in mailcomment settings, this string will be used in message
      subjects.  For example, if you enter "Foo" here, message subjects will appear as "[Site Name] [Foo] Title of post".'),
    '#default_value' => $settings['subject'],
  );
  $feature_map = spaces_features_map('node');
  $item = menu_get_item('node/add');
  $types = array();
  foreach (system_admin_menu_block($item) as $menu_item) {
    $args = explode('/', $menu_item['href']);
    $type = str_replace('-', '_', array_pop($args));
    if (isset($feature_map[$type])) {
      $types[substr($menu_item['link_path'], 9)] = node_get_types('name', str_replace('-', '_', substr($menu_item['link_path'], 9)));
    }
  }
  $form['mailgroup']['nodetype'] = array(
    '#type' => 'select',
    '#title' => t('Content type'),
    '#description' => t('Choose which content type incoming messages should become.'),
    '#default_value' => $settings['nodetype'],
    '#options' => $types,
  );
  $form['mailgroup']['id'] = array(
    '#type' => 'hidden',
    '#value' => $id,
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
  );
  return $form;
}

function mailgroup_features_settings_form_validate($form, &$form_state) {
  $values = $form_state['values'];
  if (($id = db_result(db_query("SELECT id FROM {mailgroup} WHERE prefix = '%s'", $values['prefix']))) && $id != $values['id']) {
    form_set_error('prefix', t('Prefix %prefix already in use by another group.  Please enter a different prefix.', array('%prefix' => $values['prefix'])));
  }
}

function mailgroup_features_settings_form_submit($form, &$form_state) {
  if (db_result(db_query("SELECT id FROM {mailgroup} WHERE id = %d", $form_state['values']['id']))) {
    drupal_write_record('mailgroup', $form_state['values'], 'id');
    drupal_set_message(t('Mailgroup settings updated.'));
  }
  else {
    drupal_write_record('mailgroup', $form_state['values']);
    drupal_set_message(t('Mailgroup settings saved'));
  }
}

function mailgroup_global_settings() {
  $form = array();
  $form['mailgroup'] = array(
    '#title' => t('MailGroup Global Settings'),
    '#type' => 'fieldset',
  );
  $hosts = _mailcomment_catchall_hosts();
  $form['mailgroup']['mailgroup_mailbox'] = array(
    '#title' => t('MailGroup Master Address'),
    '#type' => 'select',
    '#options' => $hosts,
    '#required' => TRUE,
    '#default_value' => variable_get('mailgroup_mailbox', ''),
    '#description' => t('The mailbox to base all MailGroup mailboxes off of.'),
  );
  return system_settings_form($form);
}

function mailgroup_message_alter(&$message, $info) {
  // TODO: Use static cache of spaces object if id is same for following message
  $event = current($message->notifications['events']);
  if (variable_get('mailcomment_alter_subjects', 1) && in_array($event->objects['node']->type, variable_get('mailcomment_nodetypes', array()))) {
    if (($id = array_pop($event->objects['node']->og_groups)) && $space = spaces_load('og', $id)) {
      if ($subject = $space->controllers->variable->get('mailgroup_subject')) {
        $old = '[' . variable_get('site_name', '') . ']';
        $new = $old . ' ' . "[$subject]";
        $message->subject = str_replace($old, $new, $message->subject);
        $message->params['mail']['headers']['Reply-To'] = variable_get('mailgroup_mailbox', '');
      }
    }
  }
}

function mailgroup_block_information() {
  if (($space = spaces_get_space()) && $space->type == 'og') {
    global $user;
    $token = tokenauth_get_token($user->uid);
    $type = $space->controllers->variable->get('mailgroup_type');
    $prefix = $space->controllers->variable->get('mailgroup_address');
    $gaddress = variable_get('mailgroup_mailbox', '');
    if ($token && $type && $prefix && $gaddress) {
      $address = "$token-$prefix@" . substr($gaddress, strpos($gaddress, '@') +1);
      // TODO: Let the user reset their token here.
      // TODO: Patch tokenauth to allow for tokens per resource type.
      $content = t('You may create new @type posts by sending an email to the following address:', array('@type' => $type)) . " $address";
      return $content;
    }
  }
  return FALSE;
}

function mailgroup_page() {
  $output = '';
  $output .= mailgroup_block_information();
  $output .= t('Do not share this email address with anyone; it is for your own personal use.');
  return $output;
}

/**
 * Returns array of mailgroup settings for specified group
 */
function mailgroup_get_settings($id, $type = 'id') {
  if ($type == 'id') {
    return db_fetch_array(db_query("SELECT * FROM {mailgroup} WHERE id = %d", $id));
  }
  else {
    return db_fetch_array(db_query("SELECT * FROM {mailgroup} WHERE prefix = '%s'", $id));
  }
}


